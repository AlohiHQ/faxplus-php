<?php
/**
 * Fax
 *
 * PHP version 5
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FAX.PLUS REST API
 *
 * This is the fax.plus API v1 developed for third party developers and organizations. In order to have a better coding experience with this API, let's quickly go through some points:<br /><br /> - This API assumes **_/accounts** as an entry point with the base url of **https://restapi.fax.plus/v1**. <br /><br /> - This API treats all date and times sent to it in requests as **UTC**. Also, all dates and times returned in responses are in **UTC**<br /><br /> - Once you have an access_token, you can easily send a request to the resource server with the base url of **https://restapi.fax.plus/v1** to access your permitted resources. As an example to get the user's profile info you would send a request to **https://restapi.fax.plus/v1/accounts/self** when **Authorization** header is set to \"Bearer YOUR_ACCESS_TOKEN\" and custom header of **x-fax-clientid** is set to YOUR_CLIENT_ID
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace faxplus\model;

use \ArrayAccess;
use \faxplus\ObjectSerializer;

/**
 * Fax Class Doc Comment
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fax implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fax';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'comment' => 'string',
        'cost' => 'int',
        'direction' => 'string',
        'from' => 'string',
        'status' => 'string',
        'scheduled_time' => 'string',
        'description' => 'string',
        'is_spam' => 'bool',
        'submit_time' => 'string',
        'cost_details' => '\faxplus\model\FaxCostDetails',
        'header' => 'string',
        'file' => 'string',
        'file_name' => 'string',
        'retry_delay' => 'int',
        'max_retry' => 'int',
        'pages' => 'int',
        'start_time' => 'string',
        'to' => 'string',
        'duration' => 'int',
        'last_update' => 'string',
        'is_read' => 'bool',
        'owner_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'comment' => null,
        'cost' => null,
        'direction' => null,
        'from' => null,
        'status' => null,
        'scheduled_time' => null,
        'description' => null,
        'is_spam' => null,
        'submit_time' => null,
        'cost_details' => null,
        'header' => null,
        'file' => null,
        'file_name' => null,
        'retry_delay' => null,
        'max_retry' => null,
        'pages' => null,
        'start_time' => null,
        'to' => null,
        'duration' => null,
        'last_update' => null,
        'is_read' => null,
        'owner_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'comment' => 'comment',
        'cost' => 'cost',
        'direction' => 'direction',
        'from' => 'from',
        'status' => 'status',
        'scheduled_time' => 'scheduled_time',
        'description' => 'description',
        'is_spam' => 'is_spam',
        'submit_time' => 'submit_time',
        'cost_details' => 'cost_details',
        'header' => 'header',
        'file' => 'file',
        'file_name' => 'file_name',
        'retry_delay' => 'retry_delay',
        'max_retry' => 'max_retry',
        'pages' => 'pages',
        'start_time' => 'start_time',
        'to' => 'to',
        'duration' => 'duration',
        'last_update' => 'last_update',
        'is_read' => 'is_read',
        'owner_id' => 'owner_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'comment' => 'setComment',
        'cost' => 'setCost',
        'direction' => 'setDirection',
        'from' => 'setFrom',
        'status' => 'setStatus',
        'scheduled_time' => 'setScheduledTime',
        'description' => 'setDescription',
        'is_spam' => 'setIsSpam',
        'submit_time' => 'setSubmitTime',
        'cost_details' => 'setCostDetails',
        'header' => 'setHeader',
        'file' => 'setFile',
        'file_name' => 'setFileName',
        'retry_delay' => 'setRetryDelay',
        'max_retry' => 'setMaxRetry',
        'pages' => 'setPages',
        'start_time' => 'setStartTime',
        'to' => 'setTo',
        'duration' => 'setDuration',
        'last_update' => 'setLastUpdate',
        'is_read' => 'setIsRead',
        'owner_id' => 'setOwnerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'comment' => 'getComment',
        'cost' => 'getCost',
        'direction' => 'getDirection',
        'from' => 'getFrom',
        'status' => 'getStatus',
        'scheduled_time' => 'getScheduledTime',
        'description' => 'getDescription',
        'is_spam' => 'getIsSpam',
        'submit_time' => 'getSubmitTime',
        'cost_details' => 'getCostDetails',
        'header' => 'getHeader',
        'file' => 'getFile',
        'file_name' => 'getFileName',
        'retry_delay' => 'getRetryDelay',
        'max_retry' => 'getMaxRetry',
        'pages' => 'getPages',
        'start_time' => 'getStartTime',
        'to' => 'getTo',
        'duration' => 'getDuration',
        'last_update' => 'getLastUpdate',
        'is_read' => 'getIsRead',
        'owner_id' => 'getOwnerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['scheduled_time'] = isset($data['scheduled_time']) ? $data['scheduled_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_spam'] = isset($data['is_spam']) ? $data['is_spam'] : null;
        $this->container['submit_time'] = isset($data['submit_time']) ? $data['submit_time'] : null;
        $this->container['cost_details'] = isset($data['cost_details']) ? $data['cost_details'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['retry_delay'] = isset($data['retry_delay']) ? $data['retry_delay'] : null;
        $this->container['max_retry'] = isset($data['max_retry']) ? $data['max_retry'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['is_read'] = isset($data['is_read']) ? $data['is_read'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction direction
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets scheduled_time
     *
     * @return string
     */
    public function getScheduledTime()
    {
        return $this->container['scheduled_time'];
    }

    /**
     * Sets scheduled_time
     *
     * @param string $scheduled_time scheduled_time
     *
     * @return $this
     */
    public function setScheduledTime($scheduled_time)
    {
        $this->container['scheduled_time'] = $scheduled_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_spam
     *
     * @return bool
     */
    public function getIsSpam()
    {
        return $this->container['is_spam'];
    }

    /**
     * Sets is_spam
     *
     * @param bool $is_spam is_spam
     *
     * @return $this
     */
    public function setIsSpam($is_spam)
    {
        $this->container['is_spam'] = $is_spam;

        return $this;
    }

    /**
     * Gets submit_time
     *
     * @return string
     */
    public function getSubmitTime()
    {
        return $this->container['submit_time'];
    }

    /**
     * Sets submit_time
     *
     * @param string $submit_time submit_time
     *
     * @return $this
     */
    public function setSubmitTime($submit_time)
    {
        $this->container['submit_time'] = $submit_time;

        return $this;
    }

    /**
     * Gets cost_details
     *
     * @return \faxplus\model\FaxCostDetails
     */
    public function getCostDetails()
    {
        return $this->container['cost_details'];
    }

    /**
     * Sets cost_details
     *
     * @param \faxplus\model\FaxCostDetails $cost_details cost_details
     *
     * @return $this
     */
    public function setCostDetails($cost_details)
    {
        $this->container['cost_details'] = $cost_details;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string $header header
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets retry_delay
     *
     * @return int
     */
    public function getRetryDelay()
    {
        return $this->container['retry_delay'];
    }

    /**
     * Sets retry_delay
     *
     * @param int $retry_delay retry_delay
     *
     * @return $this
     */
    public function setRetryDelay($retry_delay)
    {
        $this->container['retry_delay'] = $retry_delay;

        return $this;
    }

    /**
     * Gets max_retry
     *
     * @return int
     */
    public function getMaxRetry()
    {
        return $this->container['max_retry'];
    }

    /**
     * Sets max_retry
     *
     * @param int $max_retry max_retry
     *
     * @return $this
     */
    public function setMaxRetry($max_retry)
    {
        $this->container['max_retry'] = $max_retry;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return int
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param int $pages pages
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets is_read
     *
     * @return bool
     */
    public function getIsRead()
    {
        return $this->container['is_read'];
    }

    /**
     * Sets is_read
     *
     * @param bool $is_read is_read
     *
     * @return $this
     */
    public function setIsRead($is_read)
    {
        $this->container['is_read'] = $is_read;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


