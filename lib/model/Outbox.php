<?php
/**
 * Outbox
 *
 * PHP version 5
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FAX.PLUS REST API
 *
 * This is the fax.plus API v1 developed for third party developers and organizations. In order to have a better coding experience with this API, let's quickly go through some points:<br /><br /> - This API assumes **_/accounts** as an entry point with the base url of **https://restapi.fax.plus/v1**. <br /><br /> - This API treats all date and times sent to it in requests as **UTC**. Also, all dates and times returned in responses are in **UTC**<br /><br /> - Once you have an access_token, you can easily send a request to the resource server with the base url of **https://restapi.fax.plus/v1** to access your permitted resources. As an example to get the user's profile info you would send a request to **https://restapi.fax.plus/v1/accounts/self** when **Authorization** header is set to \"Bearer YOUR_ACCESS_TOKEN\" and custom header of **x-fax-clientid** is set to YOUR_CLIENT_ID
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace faxplus\model;

use \ArrayAccess;
use \faxplus\ObjectSerializer;

/**
 * Outbox Class Doc Comment
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Outbox implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Outbox';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'files' => 'string[]',
        'src' => 'string',
        'retry' => '\faxplus\model\AccountSettingsSendFaxRetry',
        'should_enhance' => 'bool',
        'uid' => 'string',
        'designated_src' => 'string',
        'ip' => 'string',
        'page_count' => 'int',
        'comment' => '\faxplus\model\PayloadOutboxComment',
        'id' => 'string',
        'file_changes' => '\faxplus\model\OutboxFileChanges[]',
        'to' => 'string[]',
        'status' => 'string',
        'status_changes' => '\faxplus\model\OutboxStatusChanges[]',
        'contact_name' => 'string',
        'send_time' => 'string',
        'initiated_from' => '\faxplus\model\OutboxInitiatedFrom',
        'submit_time' => 'string',
        'last_updated_status_time' => 'string',
        'options' => 'object',
        'extra_info' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'files' => null,
        'src' => null,
        'retry' => null,
        'should_enhance' => null,
        'uid' => null,
        'designated_src' => null,
        'ip' => null,
        'page_count' => null,
        'comment' => null,
        'id' => null,
        'file_changes' => null,
        'to' => null,
        'status' => null,
        'status_changes' => null,
        'contact_name' => null,
        'send_time' => null,
        'initiated_from' => null,
        'submit_time' => null,
        'last_updated_status_time' => null,
        'options' => null,
        'extra_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'files' => 'files',
        'src' => 'src',
        'retry' => 'retry',
        'should_enhance' => 'should_enhance',
        'uid' => 'uid',
        'designated_src' => 'designated_src',
        'ip' => 'ip',
        'page_count' => 'page_count',
        'comment' => 'comment',
        'id' => 'id',
        'file_changes' => 'file_changes',
        'to' => 'to',
        'status' => 'status',
        'status_changes' => 'status_changes',
        'contact_name' => 'contact_name',
        'send_time' => 'send_time',
        'initiated_from' => 'initiated_from',
        'submit_time' => 'submit_time',
        'last_updated_status_time' => 'last_updated_status_time',
        'options' => 'options',
        'extra_info' => 'extra_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'files' => 'setFiles',
        'src' => 'setSrc',
        'retry' => 'setRetry',
        'should_enhance' => 'setShouldEnhance',
        'uid' => 'setUid',
        'designated_src' => 'setDesignatedSrc',
        'ip' => 'setIp',
        'page_count' => 'setPageCount',
        'comment' => 'setComment',
        'id' => 'setId',
        'file_changes' => 'setFileChanges',
        'to' => 'setTo',
        'status' => 'setStatus',
        'status_changes' => 'setStatusChanges',
        'contact_name' => 'setContactName',
        'send_time' => 'setSendTime',
        'initiated_from' => 'setInitiatedFrom',
        'submit_time' => 'setSubmitTime',
        'last_updated_status_time' => 'setLastUpdatedStatusTime',
        'options' => 'setOptions',
        'extra_info' => 'setExtraInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'files' => 'getFiles',
        'src' => 'getSrc',
        'retry' => 'getRetry',
        'should_enhance' => 'getShouldEnhance',
        'uid' => 'getUid',
        'designated_src' => 'getDesignatedSrc',
        'ip' => 'getIp',
        'page_count' => 'getPageCount',
        'comment' => 'getComment',
        'id' => 'getId',
        'file_changes' => 'getFileChanges',
        'to' => 'getTo',
        'status' => 'getStatus',
        'status_changes' => 'getStatusChanges',
        'contact_name' => 'getContactName',
        'send_time' => 'getSendTime',
        'initiated_from' => 'getInitiatedFrom',
        'submit_time' => 'getSubmitTime',
        'last_updated_status_time' => 'getLastUpdatedStatusTime',
        'options' => 'getOptions',
        'extra_info' => 'getExtraInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['src'] = isset($data['src']) ? $data['src'] : null;
        $this->container['retry'] = isset($data['retry']) ? $data['retry'] : null;
        $this->container['should_enhance'] = isset($data['should_enhance']) ? $data['should_enhance'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['designated_src'] = isset($data['designated_src']) ? $data['designated_src'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['file_changes'] = isset($data['file_changes']) ? $data['file_changes'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_changes'] = isset($data['status_changes']) ? $data['status_changes'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['send_time'] = isset($data['send_time']) ? $data['send_time'] : null;
        $this->container['initiated_from'] = isset($data['initiated_from']) ? $data['initiated_from'] : null;
        $this->container['submit_time'] = isset($data['submit_time']) ? $data['submit_time'] : null;
        $this->container['last_updated_status_time'] = isset($data['last_updated_status_time']) ? $data['last_updated_status_time'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['extra_info'] = isset($data['extra_info']) ? $data['extra_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets files
     *
     * @return string[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets src
     *
     * @return string
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param string $src src
     *
     * @return $this
     */
    public function setSrc($src)
    {
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets retry
     *
     * @return \faxplus\model\AccountSettingsSendFaxRetry
     */
    public function getRetry()
    {
        return $this->container['retry'];
    }

    /**
     * Sets retry
     *
     * @param \faxplus\model\AccountSettingsSendFaxRetry $retry retry
     *
     * @return $this
     */
    public function setRetry($retry)
    {
        $this->container['retry'] = $retry;

        return $this;
    }

    /**
     * Gets should_enhance
     *
     * @return bool
     */
    public function getShouldEnhance()
    {
        return $this->container['should_enhance'];
    }

    /**
     * Sets should_enhance
     *
     * @param bool $should_enhance should_enhance
     *
     * @return $this
     */
    public function setShouldEnhance($should_enhance)
    {
        $this->container['should_enhance'] = $should_enhance;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets designated_src
     *
     * @return string
     */
    public function getDesignatedSrc()
    {
        return $this->container['designated_src'];
    }

    /**
     * Sets designated_src
     *
     * @param string $designated_src designated_src
     *
     * @return $this
     */
    public function setDesignatedSrc($designated_src)
    {
        $this->container['designated_src'] = $designated_src;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count page_count
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \faxplus\model\PayloadOutboxComment
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \faxplus\model\PayloadOutboxComment $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets file_changes
     *
     * @return \faxplus\model\OutboxFileChanges[]
     */
    public function getFileChanges()
    {
        return $this->container['file_changes'];
    }

    /**
     * Sets file_changes
     *
     * @param \faxplus\model\OutboxFileChanges[] $file_changes file_changes
     *
     * @return $this
     */
    public function setFileChanges($file_changes)
    {
        $this->container['file_changes'] = $file_changes;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string[]
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string[] $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_changes
     *
     * @return \faxplus\model\OutboxStatusChanges[]
     */
    public function getStatusChanges()
    {
        return $this->container['status_changes'];
    }

    /**
     * Sets status_changes
     *
     * @param \faxplus\model\OutboxStatusChanges[] $status_changes status_changes
     *
     * @return $this
     */
    public function setStatusChanges($status_changes)
    {
        $this->container['status_changes'] = $status_changes;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets send_time
     *
     * @return string
     */
    public function getSendTime()
    {
        return $this->container['send_time'];
    }

    /**
     * Sets send_time
     *
     * @param string $send_time send_time
     *
     * @return $this
     */
    public function setSendTime($send_time)
    {
        $this->container['send_time'] = $send_time;

        return $this;
    }

    /**
     * Gets initiated_from
     *
     * @return \faxplus\model\OutboxInitiatedFrom
     */
    public function getInitiatedFrom()
    {
        return $this->container['initiated_from'];
    }

    /**
     * Sets initiated_from
     *
     * @param \faxplus\model\OutboxInitiatedFrom $initiated_from initiated_from
     *
     * @return $this
     */
    public function setInitiatedFrom($initiated_from)
    {
        $this->container['initiated_from'] = $initiated_from;

        return $this;
    }

    /**
     * Gets submit_time
     *
     * @return string
     */
    public function getSubmitTime()
    {
        return $this->container['submit_time'];
    }

    /**
     * Sets submit_time
     *
     * @param string $submit_time submit_time
     *
     * @return $this
     */
    public function setSubmitTime($submit_time)
    {
        $this->container['submit_time'] = $submit_time;

        return $this;
    }

    /**
     * Gets last_updated_status_time
     *
     * @return string
     */
    public function getLastUpdatedStatusTime()
    {
        return $this->container['last_updated_status_time'];
    }

    /**
     * Sets last_updated_status_time
     *
     * @param string $last_updated_status_time last_updated_status_time
     *
     * @return $this
     */
    public function setLastUpdatedStatusTime($last_updated_status_time)
    {
        $this->container['last_updated_status_time'] = $last_updated_status_time;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets extra_info
     *
     * @return object
     */
    public function getExtraInfo()
    {
        return $this->container['extra_info'];
    }

    /**
     * Sets extra_info
     *
     * @param object $extra_info extra_info
     *
     * @return $this
     */
    public function setExtraInfo($extra_info)
    {
        $this->container['extra_info'] = $extra_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


