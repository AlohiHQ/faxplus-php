<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FAX.PLUS REST API
 *
 * This is the fax.plus API v1 developed for third party developers and organizations. In order to have a better coding experience with this API, let's quickly go through some points:<br /><br /> - This API assumes **_/accounts** as an entry point with the base url of **https://restapi.fax.plus/v1**. <br /><br /> - This API treats all date and times sent to it in requests as **UTC**. Also, all dates and times returned in responses are in **UTC**<br /><br /> - Once you have an access_token, you can easily send a request to the resource server with the base url of **https://restapi.fax.plus/v1** to access your permitted resources. As an example to get the user's profile info you would send a request to **https://restapi.fax.plus/v1/accounts/self** when **Authorization** header is set to \"Bearer YOUR_ACCESS_TOKEN\" and custom header of **x-fax-clientid** is set to YOUR_CLIENT_ID
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace faxplus\model;

use \ArrayAccess;
use \faxplus\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  faxplus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'string',
        'account_type' => 'string',
        'lastname' => 'string',
        'profile_image' => 'string',
        'creation_date' => 'string',
        'phone' => 'string',
        'last_password_modification_date' => 'string',
        'uid' => 'string',
        'account_data' => '\faxplus\model\AccountAccountData',
        'name' => 'string',
        'member_of' => 'string[]',
        'settings' => '\faxplus\model\AccountSettings',
        'email' => 'string',
        'notifications' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'status' => null,
        'account_type' => null,
        'lastname' => null,
        'profile_image' => null,
        'creation_date' => null,
        'phone' => null,
        'last_password_modification_date' => null,
        'uid' => null,
        'account_data' => null,
        'name' => null,
        'member_of' => null,
        'settings' => null,
        'email' => null,
        'notifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'account_type' => 'account_type',
        'lastname' => 'lastname',
        'profile_image' => 'profile_image',
        'creation_date' => 'creation_date',
        'phone' => 'phone',
        'last_password_modification_date' => 'last_password_modification_date',
        'uid' => 'uid',
        'account_data' => 'account_data',
        'name' => 'name',
        'member_of' => 'member_of',
        'settings' => 'settings',
        'email' => 'email',
        'notifications' => 'notifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'account_type' => 'setAccountType',
        'lastname' => 'setLastname',
        'profile_image' => 'setProfileImage',
        'creation_date' => 'setCreationDate',
        'phone' => 'setPhone',
        'last_password_modification_date' => 'setLastPasswordModificationDate',
        'uid' => 'setUid',
        'account_data' => 'setAccountData',
        'name' => 'setName',
        'member_of' => 'setMemberOf',
        'settings' => 'setSettings',
        'email' => 'setEmail',
        'notifications' => 'setNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'account_type' => 'getAccountType',
        'lastname' => 'getLastname',
        'profile_image' => 'getProfileImage',
        'creation_date' => 'getCreationDate',
        'phone' => 'getPhone',
        'last_password_modification_date' => 'getLastPasswordModificationDate',
        'uid' => 'getUid',
        'account_data' => 'getAccountData',
        'name' => 'getName',
        'member_of' => 'getMemberOf',
        'settings' => 'getSettings',
        'email' => 'getEmail',
        'notifications' => 'getNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['profile_image'] = isset($data['profile_image']) ? $data['profile_image'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['last_password_modification_date'] = isset($data['last_password_modification_date']) ? $data['last_password_modification_date'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['account_data'] = isset($data['account_data']) ? $data['account_data'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['member_of'] = isset($data['member_of']) ? $data['member_of'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Your account status which could be active, inactive etc
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type Account type which could be corporate_admin, individual, etc
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname Your last name
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets profile_image
     *
     * @return string
     */
    public function getProfileImage()
    {
        return $this->container['profile_image'];
    }

    /**
     * Sets profile_image
     *
     * @param string $profile_image Profile image path
     *
     * @return $this
     */
    public function setProfileImage($profile_image)
    {
        $this->container['profile_image'] = $profile_image;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date creation date in UTC in the format of YYYY-MM-DD
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Your account phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets last_password_modification_date
     *
     * @return string
     */
    public function getLastPasswordModificationDate()
    {
        return $this->container['last_password_modification_date'];
    }

    /**
     * Sets last_password_modification_date
     *
     * @param string $last_password_modification_date The date in which you have changed your password
     *
     * @return $this
     */
    public function setLastPasswordModificationDate($last_password_modification_date)
    {
        $this->container['last_password_modification_date'] = $last_password_modification_date;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid user id of current user
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets account_data
     *
     * @return \faxplus\model\AccountAccountData
     */
    public function getAccountData()
    {
        return $this->container['account_data'];
    }

    /**
     * Sets account_data
     *
     * @param \faxplus\model\AccountAccountData $account_data account_data
     *
     * @return $this
     */
    public function setAccountData($account_data)
    {
        $this->container['account_data'] = $account_data;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name your first name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets member_of
     *
     * @return string[]
     */
    public function getMemberOf()
    {
        return $this->container['member_of'];
    }

    /**
     * Sets member_of
     *
     * @param string[] $member_of list of user ids that you are member of.
     *
     * @return $this
     */
    public function setMemberOf($member_of)
    {
        $this->container['member_of'] = $member_of;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \faxplus\model\AccountSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \faxplus\model\AccountSettings $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Account email address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return object
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param object $notifications notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


